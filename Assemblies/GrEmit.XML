<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GrEmit</name>
    </assembly>
    <members>
        <member name="T:GrEmit.TypesAssignabilityVerificationKind">
            <summary>
            Level of verification of types compatibility
            </summary>
        </member>
        <member name="F:GrEmit.TypesAssignabilityVerificationKind.None">
            <summary>
            Performs no checks at all with regard to types assignability
            </summary>
        </member>
        <member name="F:GrEmit.TypesAssignabilityVerificationKind.LowLevelOnly">
            <summary>
            Makes no difference between CLI pointer types (objects, managed pointers, unmanaged pointers).
            Still performs all verifications between these low level types (u can't store int64 to int32 for intance).
            </summary>
        </member>
        <member name="F:GrEmit.TypesAssignabilityVerificationKind.HighLevel">
            <summary>
            Performs all verifications with regard to types assignability. This is the default behaviour.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.DeclareLocal(System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
                Declares a local variable of the specified type, optionally pinning the object referred to by the variable.
            </summary>
            <param name="localType">
                A <see cref="T:System.Type">Type</see> object that represents the type of the local variable.
            </param>
            <param name="name">Name of the local being declared.</param>
            <param name="pinned">true to pin the object in memory; otherwise, false.</param>
            <param name="appendUniquePrefix">true if a unique prefix is to be appended.</param>
            <returns>
                A <see cref="T:GrEmit.GroboIL.Local">Local</see> object that represents the local variable.
            </returns>
        </member>
        <member name="M:GrEmit.GroboIL.DeclareLocal(System.Type,System.Boolean)">
            <summary>
                Declares a local variable of the specified type, optionally pinning the object referred to by the variable.
            </summary>
            <param name="localType">
                A <see cref="T:System.Type">Type</see> object that represents the type of the local variable.
            </param>
            <param name="pinned">true to pin the object in memory; otherwise, false.</param>
            <returns>
                A <see cref="T:GrEmit.GroboIL.Local">Local</see> object that represents the local variable.
            </returns>
        </member>
        <member name="M:GrEmit.GroboIL.DefineLabel(System.String,System.Boolean)">
            <summary>
                Declares a new label.
            </summary>
            <param name="name">Name of label.</param>
            <param name="appendUniquePrefix">true if a unique prefix is to be appended.</param>
            <returns>
                A <see cref="T:GrEmit.GroboIL.Label">Label</see> object that can be used as a token for branching.
            </returns>
        </member>
        <member name="M:GrEmit.GroboIL.MarkLabel(GrEmit.GroboIL.Label)">
            <summary>
                Marks the Common intermediate language (CIL) stream's current position with the given label.
            </summary>
            <param name="label">
                The <see cref="T:GrEmit.GroboIL.Label">Label</see> object to mark the CIL stream's current position with.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.WriteLine(System.String)">
            <summary>
                Emits the Common intermediate language (CIL) to call System.Console.WriteLine with a string.
            </summary>
            <param name="str">The string to be printed.</param>
        </member>
        <member name="M:GrEmit.GroboIL.WriteLine(GrEmit.GroboIL.Local)">
            <summary>
                Emits the Common intermediate language (CIL) to call System.Console.WriteLine with the given local variable.
            </summary>
            <param name="local">The local variable whose value is to be written to the console.</param>
        </member>
        <member name="M:GrEmit.GroboIL.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Marks a sequence point in the Common intermediate language (CIL) stream.
            </summary>
            <param name="document">The document for which the sequence point is being defined.</param>
            <param name="startLine">The line where the sequence point begins.</param>
            <param name="startColumn">The column in the line where the sequence point begins.</param>
            <param name="endLine">The line where the sequence point ends.</param>
            <param name="endColumn">The column in the line where the sequence point ends.</param>
        </member>
        <member name="M:GrEmit.GroboIL.BeginExceptionBlock">
            <summary>
                Begins an exception block for a non-filtered exception.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.BeginCatchBlock(System.Type)">
            <summary>
                Begins a catch block.
            </summary>
            <param name="exceptionType">
                The <see cref="T:System.Type">Type</see> object that represents the exception.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.BeginExceptFilterBlock">
            <summary>
                Begins an exception block for a filtered exception.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.BeginFaultBlock">
            <summary>
                Begins an exception fault block in the Common intermediate language (CIL) stream.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.BeginFinallyBlock">
            <summary>
                Begins a finally block in the Common intermediate language (CIL) instruction stream.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.EndExceptionBlock">
            <summary>
                Ends an exception block.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Break">
            <summary>
                Signals the Common Language Infrastructore (CLI) to inform the debugger that a break point has been tripped
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Nop">
            <summary>
                Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Throw">
            <summary>
                Throws the exception object currently on the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Rethrow">
            <summary>
                Rethrows the current exception.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Switch(GrEmit.GroboIL.Label[])">
            <summary>
                Implements a jump table.
            </summary>
            <param name="labels">
                The array of <see cref="T:GrEmit.GroboIL.Label">Label</see> object to jump to.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ret">
            <summary>
                Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Leave(GrEmit.GroboIL.Label)">
            <summary>
                Exits a protected region of code, unconditionally transferring control to a specific target instruction.
            </summary>
            <param name="label">
                The <see cref="T:GrEmit.GroboIL.Label">Label</see> object to jump to.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Jmp(System.Reflection.MethodInfo)">
            <summary>
                Exits current method and jumps to specified method.
                <param name="method">
                    The <see cref="T:System.Reflection.MethodInfo">Method</see> to jump to.
                </param>
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Br(GrEmit.GroboIL.Label)">
            <summary>
                Unconditionally transfers control to a target instruction.
            </summary>
            <param name="label">
                The <see cref="T:GrEmit.GroboIL.Label">Label</see> object to jump to.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Brfalse(GrEmit.GroboIL.Label)">
            <summary>
                Transfers control to a target instruction if value is false, a null reference, or zero.
            </summary>
            <param name="label">
                The <see cref="T:GrEmit.GroboIL.Label">Label</see> object to jump to.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Brtrue(GrEmit.GroboIL.Label)">
            <summary>
                Transfers control to a target instruction if value is true, not null, or non-zero.
            </summary>
            <param name="label">
                The <see cref="T:GrEmit.GroboIL.Label">Label</see> object to jump to.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ble(GrEmit.GroboIL.Label,System.Boolean)">
            <summary>
                Transfers control to a target instruction if the first value is less than or equal to the second value.
            </summary>
            <param name="label">
                The <see cref="T:GrEmit.GroboIL.Label">Label</see> object to jump to.
            </param>
            <param name="unsigned">
                True if treat values being compared as unsigned.
                <para></para>
                Depending on that flag either <see cref="F:System.Reflection.Emit.OpCodes.Ble">Ble</see> or <see cref="F:System.Reflection.Emit.OpCodes.Ble_Un">Ble_Un</see> instruction will be emitted.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Bge(GrEmit.GroboIL.Label,System.Boolean)">
            <summary>
                Transfers control to a target instruction if the first value is greater than or equal to the second value.
            </summary>
            <param name="label">
                The <see cref="T:GrEmit.GroboIL.Label">Label</see> object to jump to.
            </param>
            <param name="unsigned">
                True if treat values being compared as unsigned.
                <para></para>
                Depending on that flag either <see cref="F:System.Reflection.Emit.OpCodes.Bge">Bge</see> or <see cref="F:System.Reflection.Emit.OpCodes.Bge_Un">Bge_Un</see> instruction will be emitted.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Blt(GrEmit.GroboIL.Label,System.Boolean)">
            <summary>
                Transfers control to a target instruction if the first value is less than the second value.
            </summary>
            <param name="label">
                The <see cref="T:GrEmit.GroboIL.Label">Label</see> object to jump to.
            </param>
            <param name="unsigned">
                True if treat values being compared as unsigned.
                <para></para>
                Depending on that flag either <see cref="F:System.Reflection.Emit.OpCodes.Blt">Blt</see> or <see cref="F:System.Reflection.Emit.OpCodes.Blt_Un">Blt_Un</see> instruction will be emitted.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Bgt(GrEmit.GroboIL.Label,System.Boolean)">
            <summary>
                Transfers control to a target instruction if the first value is greater than the second value.
            </summary>
            <param name="label">
                The <see cref="T:GrEmit.GroboIL.Label">Label</see> object to jump to.
            </param>
            <param name="unsigned">
                True if treat values being compared as unsigned.
                <para></para>
                Depending on that flag either <see cref="F:System.Reflection.Emit.OpCodes.Bgt">Bgt</see> or <see cref="F:System.Reflection.Emit.OpCodes.Bgt_Un">Bgt_Un</see> instruction will be emitted.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Bne_Un(GrEmit.GroboIL.Label)">
            <summary>
                Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="label">
                The <see cref="T:GrEmit.GroboIL.Label">Label</see> object to jump to.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Beq(GrEmit.GroboIL.Label)">
            <summary>
                Transfers control to a target instruction if two values are equal.
            </summary>
            <param name="label">
                The <see cref="T:GrEmit.GroboIL.Label">Label</see> object to jump to.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ceq">
            <summary>
                Compares two values. If they are equal, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Cgt(System.Boolean)">
            <summary>
                Compares two values. If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <param name="unsigned">
                True if treat values being compared as unsigned.
                <para></para>
                Depending on that flag either <see cref="F:System.Reflection.Emit.OpCodes.Cgt">Cgt</see> or <see cref="F:System.Reflection.Emit.OpCodes.Cgt_Un">Cgt_Un</see> instruction will be emitted.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Clt(System.Boolean)">
            <summary>
                Compares two values. If the first value is less than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <param name="unsigned">
                True if treat values being compared as unsigned.
                <para></para>
                Depending on that flag either <see cref="F:System.Reflection.Emit.OpCodes.Clt">Clt</see> or <see cref="F:System.Reflection.Emit.OpCodes.Clt_Un">Clt_Un</see> instruction will be emitted.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Pop">
            <summary>
                Removes the value currently on top of the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Dup">
            <summary>
                Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Ldloca(GrEmit.GroboIL.Local)">
            <summary>
                Loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="local">
                The <see cref="T:GrEmit.GroboIL.Local">Local</see> object whose address needs to be loaded onto the evaluation stack.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldloc(GrEmit.GroboIL.Local)">
            <summary>
                Loads the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="local">
                The <see cref="T:GrEmit.GroboIL.Local">Local</see> object which needs to be loaded onto the evaluation stack.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Stloc(GrEmit.GroboIL.Local)">
            <summary>
                Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.
            </summary>
            <param name="local">
                The <see cref="T:GrEmit.GroboIL.Local">Local</see> object in which the value must be stored.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldnull">
            <summary>
                Pushes a null reference (type O) onto the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Initobj(System.Type)">
            <summary>
                Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.
            </summary>
            <param name="type">
                The <see cref="T:System.Type">Type</see> of object being initialized. Must be a value type.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Cpobj(System.Type)">
            <summary>
                Copies the value type located at the address of an object (type &amp;, * or native int) to the address of the destination object (type &amp;, * or native int).
                <para></para>
                The parameters are: a destination address and a source address.
            </summary>
            <param name="type">
                The <see cref="T:System.Type">Type</see> of objects being copied. Must be a value type.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldarg(System.Int32)">
            <summary>
                Loads an argument (referenced by a specified index value) onto the evaluation stack.
            </summary>
            <param name="index">
                Index of the argument being pushed.
                <para></para>
                Depending on that index emits on of the following instructions:
                <para></para>
                <see cref="F:System.Reflection.Emit.OpCodes.Ldarg_0">Ldarg_0</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldarg_1">Ldarg_1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldarg_2">Ldarg_2</see>,
                <see cref="F:System.Reflection.Emit.OpCodes.Ldarg_3">Ldarg_3</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldarg_S">Ldarg_S</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldarg">Ldarg</see>
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Starg(System.Int32)">
            <summary>
                Stores the value on top of the evaluation stack in the argument slot at a specified index.
            </summary>
            <param name="index">
                Index of the argument to store the value in.
                <para></para>
                Depending on that index emits either <see cref="F:System.Reflection.Emit.OpCodes.Starg_S">Starg_S</see> or <see cref="F:System.Reflection.Emit.OpCodes.Starg">Starg</see> instruction.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldarga(System.Int32)">
            <summary>
                Load an argument address onto the evaluation stack.
            </summary>
            <param name="index">
                Index of the argument to load address of.
                <para></para>
                Depending on that index emits either <see cref="F:System.Reflection.Emit.OpCodes.Ldarga_S">Ldarga_S</see> or <see cref="F:System.Reflection.Emit.OpCodes.Ldarga">Ldarga</see> instruction.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Arglist">
            <summary>
                Returns an unmanaged pointer to the argument list of the current method
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Ldc_I4(System.Int32)">
            <summary>
                Pushes a supplied value of type int32 onto the evaluation stack as an int32.
            </summary>
            <param name="value">
                The value to push.
                <para></para>
                Depending on the value emits one of the following instructions:
                <para></para>
                <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">Ldc_I4_0</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">Ldc_I4_1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">Ldc_I4_2</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">Ldc_I4_3</see>,
                <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">Ldc_I4_4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">Ldc_I4_5</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">Ldc_I4_6</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">Ldc_I4_7</see>,
                <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">Ldc_I4_8</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">Ldc_I4_M1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">Ldc_I4_S</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4">Ldc_I4</see>
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldc_I8(System.Int64)">
            <summary>
                Pushes a supplied value of type int64 onto the evaluation stack as an int64.
            </summary>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldc_R4(System.Single)">
            <summary>
                Pushes a supplied value of type float32 onto the evaluation stack as type F (float).
            </summary>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldc_R8(System.Double)">
            <summary>
                Pushes a supplied value of type float64 onto the evaluation stack as type F (float).
            </summary>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldc_IntPtr(System.IntPtr)">
            <summary>
                Pushes a supplied value of type native int onto the evaluation stack.
            </summary>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:GrEmit.GroboIL.FreePinnedLocal(GrEmit.GroboIL.Local)">
            <summary>
            Clears the specified pinned local by setting it to null
            </summary>
            <param name="local"></param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldlen">
            <summary>
                Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Ldftn(System.Reflection.MethodInfo)">
            <summary>
                Pushes an unmanaged pointer (type native int) to the native code implementing a specific method onto the evaluation stack.
            </summary>
            <param name="method">The method to load address of.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldvirtftn(System.Reflection.MethodInfo)">
            <summary>
                Pushes an unmanaged pointer (type native int) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.
            </summary>
            <param name="method">The method to load address of.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Stfld(System.Reflection.FieldInfo,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Replaces the value of a field with a value from the evaluation stack.
            </summary>
            <param name="field">
                The field to store value in.
                <para></para>
                Depending on whether the field is static or not emits either <see cref="F:System.Reflection.Emit.OpCodes.Stsfld">Stsfld</see> or <see cref="F:System.Reflection.Emit.OpCodes.Stfld">Stfld</see> respectively.
            </param>
            <param name="isVolatile">True if an address on top of the evaluation stack must be treated as volatile.</param>
            <param name="unaligned">The value of alignment and null if address is aligned to the natural size.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldfld(System.Reflection.FieldInfo,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Pushes the value of a field onto the evaluation stack.
            </summary>
            <param name="field">
                The field to load value of.
                <para></para>
                Depending on whether the field is static or not emits either <see cref="F:System.Reflection.Emit.OpCodes.Ldsfld">Ldsfld</see> or <see cref="F:System.Reflection.Emit.OpCodes.Ldfld">Ldfld</see> respectively.
            </param>
            <param name="isVolatile">True if an address on top of the evaluation stack must be treated as volatile.</param>
            <param name="unaligned">The value of alignment and null if address is aligned to the natural size.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldflda(System.Reflection.FieldInfo)">
            <summary>
                Pushes the address of a field onto the evaluation stack.
            </summary>
            <param name="field">
                The field to load address of.
                <para></para>
                Depending on whether the field is static or not emits either <see cref="F:System.Reflection.Emit.OpCodes.Ldsflda">Ldsflda</see> or <see cref="F:System.Reflection.Emit.OpCodes.Ldflda">Ldflda</see> respectively.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldelema(System.Type,System.Boolean)">
            <summary>
                Loads the address of the array element at a specified array index onto the top of the evaluation stack as type &amp; (managed pointer).
            </summary>
            <param name="elementType">The element type of the array.</param>
            <param name="asReadonly">
                True if the result address should be read only. Emits the <see cref="F:System.Reflection.Emit.OpCodes.Readonly">Readonly</see> prefix.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldelem(System.Type)">
            <summary>
                Loads the element at a specified array index onto the top of the evaluation stack.
            </summary>
            <param name="elementType">
                The element type of the array.
                <para></para>
                Depending on that type emits one of the following instructions:
                <para></para>
                <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">Ldelem_Ref</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I">Ldelem_I</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I1">Ldelem_I1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I2">Ldelem_I2</see>,
                <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I4">Ldelem_I4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I8">Ldelem_I8</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U1">Ldelem_U1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U2">Ldelem_U2</see>,
                <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U4">Ldelem_U4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_R4">Ldelem_R4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_R8">Ldelem_R8</see>
                <para></para>
                If the element type is a user-defined value type emits <see cref="F:System.Reflection.Emit.OpCodes.Ldelema">Ldelema</see> &amp; <see cref="F:System.Reflection.Emit.OpCodes.Ldobj">Ldobj</see> instructions.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Stelem(System.Type)">
            <summary>
                Replaces the array element at a given index with the value on the evaluation stack.
            </summary>
            <param name="elementType">
                The element type of the array.
                <para></para>
                Depending on that type emits one of the following instructions:
                <para></para>
                <see cref="F:System.Reflection.Emit.OpCodes.Stelem_Ref">Stelem_Ref</see>, <see cref="F:System.Reflection.Emit.OpCodes.Stelem_I">Stelem_I</see>, <see cref="F:System.Reflection.Emit.OpCodes.Stelem_I1">Stelem_I1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Stelem_I2">Stelem_I2</see>,
                <see cref="F:System.Reflection.Emit.OpCodes.Stelem_I4">Stelem_I4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Stelem_I8">Stelem_I8</see>, <see cref="F:System.Reflection.Emit.OpCodes.Stelem_R4">Stelem_R4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Stelem_R8">Stelem_R8</see>
                <para></para>
                DOES NOT WORK if the element type is a user-defined value type. In such a case emit <see cref="F:System.Reflection.Emit.OpCodes.Ldelema">Ldelema</see> &amp; <see cref="F:System.Reflection.Emit.OpCodes.Stobj">Stobj</see> instructions.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Stind(System.Type,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Stores a value of a specified type at a specified address.
            </summary>
            <param name="type">
                The type of a value being stored.
                <para></para>
                Depending on that type emits one of the following instructions:
                <para></para>
                <see cref="F:System.Reflection.Emit.OpCodes.Stind_Ref">Stind_Ref</see>, <see cref="F:System.Reflection.Emit.OpCodes.Stind_I1">Stind_I1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Stind_I2">Stind_I2</see>, <see cref="F:System.Reflection.Emit.OpCodes.Stind_I4">Stind_I4</see>,
                <see cref="F:System.Reflection.Emit.OpCodes.Stind_I8">Stind_I8</see>, <see cref="F:System.Reflection.Emit.OpCodes.Stind_R4">Stind_R4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Stind_R8">Stind_R8</see>
                <para></para>
                If the value is of a user-defined value type emits <see cref="F:System.Reflection.Emit.OpCodes.Stobj">Stobj</see> instruction.
            </param>
            <param name="isVolatile">True if an address on top of the evaluation stack must be treated as volatile.</param>
            <param name="unaligned">The value of alignment and null if address is aligned to the natural size.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldind(System.Type,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Loads a value of a specifed type onto the evaluation stack indirectly.
            </summary>
            <param name="type">
                The <see cref="T:System.Type">Type</see> of a value being loaded.
                <para></para>
                Depending on that type emits one of the following instructions:
                <para></para>
                <see cref="F:System.Reflection.Emit.OpCodes.Ldind_Ref">Ldind_Ref</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldind_I1">Ldind_I1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldind_I2">Ldind_I2</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldind_I4">Ldind_I4</see>,
                <see cref="F:System.Reflection.Emit.OpCodes.Ldind_I8">Ldind_I8</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldind_U1">Ldind_U1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldind_U2">Ldind_U2</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldind_U4">Ldind_U4</see>,
                <see cref="F:System.Reflection.Emit.OpCodes.Ldind_R4">Ldind_R4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Ldind_R8">Ldind_R8</see>
                <para></para>
                If the value is of a user-defined value type emits <see cref="F:System.Reflection.Emit.OpCodes.Ldobj">Ldobj</see> instruction.
            </param>
            <param name="isVolatile">True if an address on top of the evaluation stack must be treated as volatile.</param>
            <param name="unaligned">The value of alignment and null if address is aligned to the natural size.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Cpblk(System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Copies a specified number of bytes from a source address to a destination address.
                <para></para>
                The parameters are: a destination address, a source address and a number of bytes to copy.
            </summary>
            <param name="isVolatile">True if an address on top of the evaluation stack must be treated as volatile.</param>
            <param name="unaligned">The value of alignment and null if address is aligned to the natural size.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Initblk(System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Initializes a specified block of memory at a specific address to a given size and initial value.
                <para></para>
                The parameters are: an address, an initial value and a number of bytes.
            </summary>
            <param name="isVolatile">True if an address on top of the evaluation stack must be treated as volatile.</param>
            <param name="unaligned">The value of alignment and null if address is aligned to the natural size.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldtoken(System.Type)">
            <summary>
                Converts a metadata token of a specified type to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <param name="type">
                The <see cref="T:System.Type">Type</see> object metadata token of which is being pushed onto the evaluation stack.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldtoken(System.Reflection.MethodInfo)">
            <summary>
                Converts a metadata token of a specified method to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <param name="method">
                The <see cref="T:System.Reflection.MethodInfo">MethodInfo</see> object metadata token of which is being pushed onto the evaluation stack.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldtoken(System.Reflection.FieldInfo)">
            <summary>
                Converts a metadata token of a specified field to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <param name="field">
                The <see cref="T:System.Reflection.FieldInfo">FieldInfo</see> object metadata token of which is being pushed onto the evaluation stack.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Castclass(System.Type)">
            <summary>
                Attempts to cast an object passed by reference to the specified class.
            </summary>
            <param name="type">
                The <see cref="T:System.Type">Type</see> to cast an object to.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Isinst(System.Type)">
            <summary>
                Tests whether an object reference (type O) is an instance of a particular class.
            </summary>
            <param name="type">
                The <see cref="T:System.Type">Type</see> to test.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Unbox_Any(System.Type)">
            <summary>
                Converts the boxed representation of a type specified in the instruction to its unboxed form.
            </summary>
            <param name="type">
                The <see cref="T:System.Type">Type</see> of boxed object. Must be a value type.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Box(System.Type)">
            <summary>
                Converts a value type to an object reference (type O).
            </summary>
            <param name="type">
                The <see cref="T:System.Type">Type</see> of object to box.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Stobj(System.Type,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Copies a value of a specified type from the evaluation stack into a supplied memory address.
            </summary>
            <param name="type">
                The <see cref="T:System.Type">Type</see> of object to be stored.
            </param>
            <param name="isVolatile">True if an address on top of the evaluation stack must be treated as volatile.</param>
            <param name="unaligned">The value of alignment and null if address is aligned to the natural size.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Ldobj(System.Type,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Copies the value type object pointed to by an address to the top of the evaluation stack.
            </summary>
            <param name="type">
                The <see cref="T:System.Type">Type</see> of object to be loaded.
            </param>
            <param name="isVolatile">True if an address on top of the evaluation stack must be treated as volatile.</param>
            <param name="unaligned">The value of alignment and null if address is aligned to the natural size.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Newobj(System.Reflection.ConstructorInfo)">
            <summary>
                Creates a new object or a new instance of a value type, pushing an object reference (type O) onto the evaluation stack.
            </summary>
            <param name="constructor">
                The <see cref="T:System.Reflection.ConstructorInfo">Constructor</see> to be called.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Newarr(System.Type)">
            <summary>
                Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.
            </summary>
            <param name="type">
                The <see cref="T:System.Type">Type</see> of elements.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Ckfinite">
            <summary>
                Throws <see cref="T:System.ArithmeticException">ArithmeticException</see> if value is not a finite number.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.And">
            <summary>
                Computes the bitwise AND of two values and pushes the result onto the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Or">
            <summary>
                Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Xor">
            <summary>
                Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Add">
            <summary>
                Adds two values and pushes the result onto the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Add_Ovf(System.Boolean)">
            <summary>
                Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="unsigned">
                True if treat the parameters of operation as unsigned.
                <para></para>
                Depending in that flag emits either <see cref="F:System.Reflection.Emit.OpCodes.Add_Ovf">Add_Ovf</see> or <see cref="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">Add_Ovf_Un</see> instruction.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Sub">
            <summary>
                Subtracts one value from another and pushes the result onto the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Sub_Ovf(System.Boolean)">
            <summary>
                Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="unsigned">
                True if treat the parameters of operation as unsigned.
                <para></para>
                Depending in that flag emits either <see cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf">Sub_Ovf</see> or <see cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">Sub_Ovf_Un</see> instruction.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Mul">
            <summary>
                Multiplies two values and pushes the result on the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Mul_Ovf(System.Boolean)">
            <summary>
                Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="unsigned">
                True if treat the parameters of operation as unsigned.
                <para></para>
                Depending in that flag emits either <see cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf">Mul_Ovf</see> or <see cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">Mul_Ovf_Un</see> instruction.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Div(System.Boolean)">
            <summary>
                Divides two values and pushes the result as a floating-point (type F) or quotient (type int32) onto the evaluation stack.
            </summary>
            <param name="unsigned">
                True if treat the parameters of operation as unsigned.
                <para></para>
                Depending in that flag emits either <see cref="F:System.Reflection.Emit.OpCodes.Div">Div</see> or <see cref="F:System.Reflection.Emit.OpCodes.Div_Un">Div_Un</see> instruction.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Rem(System.Boolean)">
            <summary>
                Divides two values and pushes the remainder onto the evaluation stack.
            </summary>
            <param name="unsigned">
                True if treat the parameters of operation as unsigned.
                <para></para>
                Depending in that flag emits either <see cref="F:System.Reflection.Emit.OpCodes.Rem">Rem</see> or <see cref="F:System.Reflection.Emit.OpCodes.Rem_Un">Rem_Un</see> instruction.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Shl">
            <summary>
                Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Shr(System.Boolean)">
            <summary>
                Shifts an integer value to the right by a specified number of bits, pushing the result onto the evaluation stack.
            </summary>
            <param name="unsigned">
                True if treat the parameters of operation as unsigned.
                <para></para>
                Depending in that flag emits either <see cref="F:System.Reflection.Emit.OpCodes.Shr">Shr</see> or <see cref="F:System.Reflection.Emit.OpCodes.Shr_Un">Shr_Un</see> instruction.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Neg">
            <summary>
                Negates a value and pushes the result onto the evaluation stack.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Not">
            <summary>
                Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Ldstr(System.String)">
            <summary>
                Pushes a new object reference to a string literal stored in the metadata.
            </summary>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Conv``1">
            <summary>
                Converts the value on top of the evaluation stack to a specified numeric type.
            </summary>
            <typeparam name="T">
                The <see cref="T:System.Type">Type</see> to convert to.
                <para>
                    Depending on that type one of the following instructions will be emitted:
                    <para></para>
                    <see cref="F:System.Reflection.Emit.OpCodes.Conv_I1">Conv_I1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_U1">Conv_U1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_I2">Conv_I2</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_U2">Conv_U2</see>,
                    <see cref="F:System.Reflection.Emit.OpCodes.Conv_I4">Conv_I4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_U4">Conv_U4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_I8">Conv_I8</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_U8">Conv_U8</see>,
                    <see cref="F:System.Reflection.Emit.OpCodes.Conv_I">Conv_I</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_U">Conv_U</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_R4">Conv_R4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_R8">Conv_R8</see>
                    <para></para>
                </para>
            </typeparam>
        </member>
        <member name="M:GrEmit.GroboIL.Conv_R_Un">
            <summary>
                Converts the unsigned integer value on top of the evaluation stack to float32.
            </summary>
        </member>
        <member name="M:GrEmit.GroboIL.Conv_Ovf``1(System.Boolean)">
            <summary>
                Converts the signed value on top of the evaluation stack to a specified integer type throwing <see cref="T:System.OverflowException">OverflowException</see>.
            </summary>
            <param name="unsigned">
                True if treat the parameters of operation as unsigned.
                <para></para>
                Depending in that flag emits either Conv_Ovf_* or Conv_Ovf_*_Un instruction.
            </param>
            <typeparam name="T">
                The <see cref="T:System.Type">Type</see> to convert to.
                <para>
                    Depending on that type one of the following instructions will be emitted:
                    <para></para>
                    <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">Conv_Ovf_I1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">Conv_Ovf_U1</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">Conv_Ovf_I2</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">Conv_Ovf_U2</see>,
                    <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">Conv_Ovf_I4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">Conv_Ovf_U4</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">Conv_Ovf_I8</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">Conv_Ovf_U8</see>,
                    <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">Conv_Ovf_I</see>, <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">Conv_Ovf_U</see>
                    <para></para>
                </para>
            </typeparam>
        </member>
        <member name="M:GrEmit.GroboIL.Call(System.Reflection.MethodInfo,System.Type,System.Boolean,System.Type[],System.Boolean)">
            <summary>
                Calls the method indicated by the passed method descriptor.
                <para></para>
                Emits a <see cref="F:System.Reflection.Emit.OpCodes.Call">Call</see> or <see cref="F:System.Reflection.Emit.OpCodes.Callvirt">Callvirt</see> instruction depending on whether the method is a virtual or not.
            </summary>
            <param name="method">
                The <see cref="T:System.Reflection.MethodInfo">Method</see> to be called.
            </param>
            <param name="constrained">
                The <see cref="T:System.Type">Type</see> of an object to constrain the method call on. Emits the <see cref="F:System.Reflection.Emit.OpCodes.Constrained">Constrained</see> prefix.
            </param>
            <param name="tailcall">
                True if the method call is a tail call. Emits the <see cref="F:System.Reflection.Emit.OpCodes.Tailcall">Tailcall</see> prefix.
            </param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method; otherwise, null.</param>
            <param name="isVirtual">Only if you sure, that method is virtual</param>
        </member>
        <member name="M:GrEmit.GroboIL.Call(System.Reflection.ConstructorInfo)">
            <summary>
                Calls the constructor indicated by the passed constructor descriptor.
            </summary>
            <param name="constructor">
                The <see cref="T:System.Reflection.ConstructorInfo">Constructor</see> to be called.
            </param>
        </member>
        <member name="M:GrEmit.GroboIL.Callnonvirt(System.Reflection.MethodInfo,System.Boolean,System.Type[])">
            <summary>
                Statically calls the method indicated by the passed method descriptor.
            </summary>
            <param name="method">
                The <see cref="T:System.Reflection.MethodInfo">Method</see> to be called.
            </param>
            <param name="tailcall">
                True if the method call is a tail call. Emits the <see cref="F:System.Reflection.Emit.OpCodes.Tailcall">Tailcall</see> prefix.
            </param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method; otherwise, null.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Calli(System.Reflection.CallingConventions,System.Type,System.Type[],System.Boolean,System.Type[])">
            <summary>
                Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.
            </summary>
            <param name="callingConvention">The managed calling convention to be used.</param>
            <param name="returnType">
                The <see cref="T:System.Type">Type</see> of the result.
            </param>
            <param name="parameterTypes">The types of the required arguments to the instruction.</param>
            <param name="tailcall">
                True if the method call is a tail call. Emits the <see cref="F:System.Reflection.Emit.OpCodes.Tailcall">Tailcall</see> prefix.
            </param>
            <param name="optionalParameterTypes">The types of the optional arguments for varargs calls.</param>
        </member>
        <member name="M:GrEmit.GroboIL.Calli(System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
            <summary>
                Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.
            </summary>
            <param name="callingConvention">The unmanaged calling convention to be used.</param>
            <param name="returnType">
                The <see cref="T:System.Type">Type</see> of the result.
            </param>
            <param name="parameterTypes">The types of the required arguments to the instruction.</param>
        </member>
        <member name="P:GrEmit.GroboIL.VerificationKind">
            <summary>
            Gets or sets level of verifications with regard to types compatibility
            </summary>
        </member>
    </members>
</doc>
